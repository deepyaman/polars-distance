{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Polars-distance plugin","text":"<p>This is the documentation for the <code>polars-distance</code> plugin. This plugin provides many distance/similariy functions for string, array and list datatypes.</p>"},{"location":"#installation","title":"Installation","text":"<p>The <code>polars-distance</code> pluygin can be installed via pip for Python.</p>"},{"location":"#install-polars-distance-for-python","title":"Install polars-distance for Python","text":"<p>With pip:</p> <pre><code>pip install polars-distance\n</code></pre>"},{"location":"api/array_distance/","title":"Array distance: dist_arr.*","text":""},{"location":"api/array_distance/#polars_distance.DistancePairWiseArray.bray_curtis","title":"bray_curtis","text":"<pre><code>bray_curtis(other: IntoExpr) -&gt; pl.Expr\n</code></pre> <p>Returns bray_curtis distance between two vectors</p>"},{"location":"api/array_distance/#polars_distance.DistancePairWiseArray.canberra","title":"canberra","text":"<pre><code>canberra(other: IntoExpr) -&gt; pl.Expr\n</code></pre> <p>Returns canberra distance between two vectors</p>"},{"location":"api/array_distance/#polars_distance.DistancePairWiseArray.chebyshev","title":"chebyshev","text":"<pre><code>chebyshev(other: IntoExpr) -&gt; pl.Expr\n</code></pre> <p>Returns chebyshev distance between two vectors</p>"},{"location":"api/array_distance/#polars_distance.DistancePairWiseArray.cosine","title":"cosine","text":"<pre><code>cosine(other: IntoExpr) -&gt; pl.Expr\n</code></pre> <p>Returns cosine distance between two vectors</p>"},{"location":"api/array_distance/#polars_distance.DistancePairWiseArray.euclidean","title":"euclidean","text":"<pre><code>euclidean(other: IntoExpr) -&gt; pl.Expr\n</code></pre> <p>Returns euclidean distance between two vectors</p>"},{"location":"api/array_distance/#polars_distance.DistancePairWiseArray.l3_norm","title":"l3_norm","text":"<pre><code>l3_norm(other: IntoExpr) -&gt; pl.Expr\n</code></pre> <p>Returns l3_norm distance between two vectors</p>"},{"location":"api/array_distance/#polars_distance.DistancePairWiseArray.l4_norm","title":"l4_norm","text":"<pre><code>l4_norm(other: IntoExpr) -&gt; pl.Expr\n</code></pre> <p>Returns l4_norm distance between two vectors</p>"},{"location":"api/array_distance/#polars_distance.DistancePairWiseArray.manhatten","title":"manhatten","text":"<pre><code>manhatten(other: IntoExpr) -&gt; pl.Expr\n</code></pre> <p>Returns manhatten distance between two vectors</p>"},{"location":"api/array_distance/#polars_distance.DistancePairWiseArray.minkowski","title":"minkowski","text":"<pre><code>minkowski(other: IntoExpr, p: int) -&gt; pl.Expr\n</code></pre> <p>Returns minkowski distance between two vectors</p>"},{"location":"api/list_distance/","title":"List distance: dist_list.*","text":""},{"location":"api/list_distance/#polars_distance.DistancePairWiseList.cosine","title":"cosine","text":"<pre><code>cosine(other: IntoExpr) -&gt; pl.Expr\n</code></pre> <p>Returns cosine distance between two lists. Each list is converted to a set.</p>"},{"location":"api/list_distance/#polars_distance.DistancePairWiseList.jaccard_index","title":"jaccard_index","text":"<pre><code>jaccard_index(other: IntoExpr) -&gt; pl.Expr\n</code></pre> <p>Returns jaccard index between two lists. Each list is converted to a set.</p>"},{"location":"api/list_distance/#polars_distance.DistancePairWiseList.overlap_coef","title":"overlap_coef","text":"<pre><code>overlap_coef(other: IntoExpr) -&gt; pl.Expr\n</code></pre> <p>Returns overlap coef between two lists. Each list is converted to a set.</p>"},{"location":"api/list_distance/#polars_distance.DistancePairWiseList.sorensen_index","title":"sorensen_index","text":"<pre><code>sorensen_index(other: IntoExpr) -&gt; pl.Expr\n</code></pre> <p>Returns sorensen index between two lists. Each list is converted to a set.</p>"},{"location":"api/list_distance/#polars_distance.DistancePairWiseList.tversky_index","title":"tversky_index","text":"<pre><code>tversky_index(\n    other: IntoExpr, alpha: float, beta: float\n) -&gt; pl.Expr\n</code></pre> <p>Returns tversky index between two lists. Each list is converted to a set.</p>"},{"location":"api/string_distance/","title":"String distance: dist_str.*","text":""},{"location":"api/string_distance/#polars_distance.DistancePairWiseString.damerau_levenshtein","title":"damerau_levenshtein","text":"<pre><code>damerau_levenshtein(\n    other: IntoExpr, normalized: bool = False\n) -&gt; pl.Expr\n</code></pre> <p>Returns damerau levenshtein distance between two expressions</p>"},{"location":"api/string_distance/#polars_distance.DistancePairWiseString.hamming","title":"hamming","text":"<pre><code>hamming(\n    other: IntoExpr, normalized: bool = False\n) -&gt; pl.Expr\n</code></pre> <p>Returns hamming distance between two expressions.</p> <p>The length of the shortest string is padded to the length of longest string.</p>"},{"location":"api/string_distance/#polars_distance.DistancePairWiseString.indel","title":"indel","text":"<pre><code>indel(other: IntoExpr, normalized: bool = False) -&gt; pl.Expr\n</code></pre> <p>Returns indel distance between two expressions</p>"},{"location":"api/string_distance/#polars_distance.DistancePairWiseString.jaro","title":"jaro","text":"<pre><code>jaro(other: IntoExpr, normalized: bool = False) -&gt; pl.Expr\n</code></pre> <p>Returns jaro distance between two expressions</p>"},{"location":"api/string_distance/#polars_distance.DistancePairWiseString.jaro_winkler","title":"jaro_winkler","text":"<pre><code>jaro_winkler(\n    other: IntoExpr, normalized: bool = False\n) -&gt; pl.Expr\n</code></pre> <p>Returns jaro_winkler distance between two expressions</p>"},{"location":"api/string_distance/#polars_distance.DistancePairWiseString.lcs_seq","title":"lcs_seq","text":"<pre><code>lcs_seq(\n    other: IntoExpr, normalized: bool = False\n) -&gt; pl.Expr\n</code></pre> <p>Returns lcs_seq distance between two expressions</p>"},{"location":"api/string_distance/#polars_distance.DistancePairWiseString.levenshtein","title":"levenshtein","text":"<pre><code>levenshtein(\n    other: IntoExpr, normalized: bool = False\n) -&gt; pl.Expr\n</code></pre> <p>Returns levenshtein distance between two expressions</p>"},{"location":"api/string_distance/#polars_distance.DistancePairWiseString.osa","title":"osa","text":"<pre><code>osa(other: IntoExpr, normalized: bool = False) -&gt; pl.Expr\n</code></pre> <p>Returns osa distance between two expressions</p>"},{"location":"api/string_distance/#polars_distance.DistancePairWiseString.postfix","title":"postfix","text":"<pre><code>postfix(\n    other: IntoExpr, normalized: bool = False\n) -&gt; pl.Expr\n</code></pre> <p>Returns postfix distance between two expressions</p>"},{"location":"api/string_distance/#polars_distance.DistancePairWiseString.prefix","title":"prefix","text":"<pre><code>prefix(\n    other: IntoExpr, normalized: bool = False\n) -&gt; pl.Expr\n</code></pre> <p>Returns prefix distance between two expressions</p>"},{"location":"usage/","title":"Overview","text":""},{"location":"usage/#examples","title":"Examples","text":"<pre><code>import polars\nimport polars_distance as pld\n\ndf = pl.DataFrame({\n    \"foo\":\"hello\",\n    \"bar\":\"hella world\"\n})\n\ndf.select(\n    pld.col(\"foo\").dist_str.hamming('bar').alias('dist')\n)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 dist \u2502\n\u2502 ---  \u2502\n\u2502 u32  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 7    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\ndf.select(\n    pld.col('foo').dist_str.levenshtein('bar').alias('dist')\n)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 dist \u2502\n\u2502 ---  \u2502\n\u2502 u32  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 6    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\ndf = pl.DataFrame(\n    {\n        \"arr\": [[1, 2, 10]],\n        \"arr2\": [[2, 5, 9]],\n    },\n    schema={\n        \"arr\": pl.Array(inner=pl.Float64, width=3),\n        \"arr2\": pl.Array(inner=pl.Float64, width=3),\n    },\n)\ndf.select(pld.col('arr').dist_arr.euclidean('arr2').alias('dist'))\nshape: (1, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 dist     \u2502\n\u2502 ---      \u2502\n\u2502 f64      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 3.316625 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"}]}